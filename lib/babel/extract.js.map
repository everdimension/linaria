{"version":3,"sources":["../../src/babel/extract.js"],"names":["require","relative","dirname","basename","generator","default","isValidElementType","Module","evaluate","slugify","units","unitless","hyphenate","s","replace","match","p1","toLowerCase","isPlainObject","o","constructor","name","toValidCSSIdentifier","toCSS","Object","entries","filter","value","map","key","p2","p3","join","stripLines","loc","text","result","String","trim","start","line","end","repeat","column","imports","t","scope","filename","identifier","source","binding","getAllBindings","p","path","resolveFromFile","id","M","_resolveFilename","paths","_nodeModulePaths","e","isImportingModule","resolve","isImportSpecifier","isImportDeclaration","parentPath","node","isVariableDeclarator","isCallExpression","init","isIdentifier","callee","arguments","length","isStringLiteral","isTemplateLiteral","quasis","cooked","throwIfInvalid","ex","Number","isFinite","stringified","JSON","stringify","buildCodeFrameError","code","unitRegex","RegExp","module","exports","extract","babel","options","types","visitor","Program","enter","state","rules","index","dependencies","replacements","invalidate","exit","keys","file","metadata","linaria","TaggedTemplateExpression","quasi","tag","styled","css","opts","component","get","isMemberExpression","object","property","stringLiteral","interpolations","isReferenced","displayName","parent","findParent","isObjectProperty","isJSXOpeningElement","getBinding","referencePaths","test","slug","charAt","root","className","cssText","expressions","forEach","el","i","self","appended","matches","last","unit","endsWith","beforeLength","next","confident","push","original","isFunctionExpression","isArrowFunctionExpression","evaluation","undefined","message","__linaria","getSource","selector","extends","props","objectProperty","it","objectExpression","items","arrayExpression","replaceWith","callExpression","addComment","includes"],"mappings":"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","sourcesContent":["/* eslint-disable no-param-reassign */\n/* @flow */\n\nconst { relative, dirname, basename } = require('path');\nconst generator = require('@babel/generator').default;\nconst { isValidElementType } = require('react-is');\nconst Module = require('./module');\nconst evaluate = require('./evaluate');\nconst slugify = require('../slugify');\nconst { units, unitless } = require('./units');\n\nconst hyphenate = s =>\n  s\n    // Hyphenate CSS property names from camelCase version from JS string\n    .replace(/([A-Z])/g, (match, p1) => `-${p1.toLowerCase()}`)\n    // Special case for `-ms` because in JS it starts with `ms` unlike `Webkit`\n    .replace(/^ms-/, '-ms-');\n\nconst isPlainObject = o =>\n  typeof o === 'object' && o != null && o.constructor.name === 'Object';\n\nconst toValidCSSIdentifier = s => s.replace(/[^_0-9a-z]/gi, '_');\n\n// Some tools such as polished.js output JS objects\n// To support them transparently, we convert JS objects to CSS strings\nconst toCSS = o =>\n  Object.entries(o)\n    .filter(\n      ([, value]) =>\n        // Ignore all falsy values except numbers\n        typeof value === 'number' || value\n    )\n    .map(([key, value]) => {\n      if (isPlainObject(value)) {\n        return `${hyphenate(key)} { ${toCSS(value)} }`;\n      }\n\n      return `${hyphenate(key)}: ${\n        /* $FlowFixMe */\n        typeof value === 'number' &&\n        value !== 0 &&\n        !unitless[\n          // Strip vendor prefixes when checking if the value is unitless\n          key.replace(\n            /^(Webkit|Moz|O|ms)([A-Z])(.+)$/,\n            (match, p1, p2, p3) => `${p2.toLowerCase()}${p3}`\n          )\n        ]\n          ? `${value}px`\n          : value\n      };`;\n    })\n    .join(' ');\n\n// Stripping away the new lines ensures that we preserve line numbers\n// This is useful in case of tools such as the stylelint pre-processor\n// This should be safe because strings cannot contain newline: https://www.w3.org/TR/CSS2/syndata.html#strings\nconst stripLines = (loc, text) => {\n  let result = String(text)\n    .replace(/[\\r\\n]+/g, ' ')\n    .trim();\n\n  // If the start and end line numbers aren't same, add new lines to span the text across multiple lines\n  if (loc.start.line !== loc.end.line) {\n    result += '\\n'.repeat(loc.end.line - loc.start.line);\n\n    // Add extra spaces to offset the column\n    result += ' '.repeat(loc.end.column);\n  }\n\n  return result;\n};\n\n// Verify if the binding is imported from the specified source\nconst imports = (t, scope, filename, identifier, source) => {\n  const binding = scope.getAllBindings()[identifier];\n\n  if (!binding) {\n    return false;\n  }\n\n  const p = binding.path;\n\n  const resolveFromFile = id => {\n    /* $FlowFixMe */\n    const M = require('module');\n\n    try {\n      return M._resolveFilename(id, {\n        id: filename,\n        filename,\n        paths: M._nodeModulePaths(dirname(filename)),\n      });\n    } catch (e) {\n      return null;\n    }\n  };\n\n  const isImportingModule = value =>\n    // If the value is an exact match, assume it imports the module\n    value === source ||\n    // Otherwise try to resolve both and check if they are the same file\n    resolveFromFile(value) ===\n      // eslint-disable-next-line no-nested-ternary\n      (source === 'linaria'\n        ? require.resolve('../index')\n        : source === 'linaria/react'\n          ? require.resolve('../react/')\n          : resolveFromFile(source));\n\n  if (t.isImportSpecifier(p) && t.isImportDeclaration(p.parentPath)) {\n    return isImportingModule(p.parentPath.node.source.value);\n  }\n\n  if (t.isVariableDeclarator(p)) {\n    if (\n      t.isCallExpression(p.node.init) &&\n      t.isIdentifier(p.node.init.callee) &&\n      p.node.init.callee.name === 'require' &&\n      p.node.init.arguments.length === 1\n    ) {\n      const node = p.node.init.arguments[0];\n\n      if (t.isStringLiteral(node)) {\n        return isImportingModule(node.value);\n      }\n\n      if (t.isTemplateLiteral(node) && node.quasis.length === 1) {\n        return isImportingModule(node.quasis[0].value.cooked);\n      }\n    }\n  }\n\n  return false;\n};\n\n// Throw if we can't handle the interpolated value\nconst throwIfInvalid = (value: any, ex: any) => {\n  if (\n    typeof value === 'function' ||\n    typeof value === 'string' ||\n    (typeof value === 'number' && Number.isFinite(value)) ||\n    isPlainObject(value)\n  ) {\n    return;\n  }\n\n  const stringified =\n    typeof value === 'object' ? JSON.stringify(value) : String(value);\n\n  throw ex.buildCodeFrameError(\n    `The expression evaluated to '${stringified}', which is probably a mistake. If you want it to be inserted into CSS, explicitly cast or transform the value to a string, e.g. - 'String(${\n      generator(ex.node).code\n    })'.`\n  );\n};\n\n// Match any valid CSS units followed by a separator such as ;, newline etc.\nconst unitRegex = new RegExp(`^(${units.join('|')})(;|,|\\n| |\\\\))`);\n\ntype Location = {\n  line: number,\n  column: number,\n};\n\ntype State = {|\n  rules: {\n    [selector: string]: {\n      className: string,\n      displayName: string,\n      cssText: string,\n      start: ?Location,\n    },\n  },\n  replacements: Array<{\n    original: { start: Location, end: Location },\n    length: number,\n  }>,\n  index: number,\n  dependencies: string[],\n  file: {\n    opts: {\n      cwd: string,\n      root: string,\n      filename: string,\n    },\n    metadata: any,\n  },\n|};\n\nexport type Options = {\n  displayName: boolean,\n  evaluate: boolean,\n  ignore: RegExp,\n};\n\nmodule.exports = function extract(babel: any, options: Options) {\n  const { types: t } = babel;\n\n  return {\n    visitor: {\n      Program: {\n        enter(path: any, state: State) {\n          // Collect all the style rules from the styles we encounter\n          state.rules = {};\n          state.index = -1;\n          state.dependencies = [];\n          state.replacements = [];\n\n          // Invalidate cache for module evaluation to get fresh modules\n          Module.invalidate();\n        },\n        exit(path: any, state: State) {\n          if (Object.keys(state.rules).length) {\n            // Store the result as the file metadata\n            state.file.metadata = {\n              linaria: {\n                rules: state.rules,\n                replacements: state.replacements,\n                dependencies: state.dependencies,\n              },\n            };\n          }\n\n          // Invalidate cache for module evaluation when we're done\n          Module.invalidate();\n        },\n      },\n      TaggedTemplateExpression(path: any, state: State) {\n        const { quasi, tag } = path.node;\n\n        let styled;\n        let css;\n\n        if (\n          t.isCallExpression(tag) &&\n          t.isIdentifier(tag.callee) &&\n          tag.arguments.length === 1 &&\n          tag.callee.name === 'styled' &&\n          imports(\n            t,\n            path.scope,\n            state.file.opts.filename,\n            'styled',\n            'linaria/react'\n          )\n        ) {\n          styled = { component: path.get('tag').get('arguments')[0] };\n        } else if (\n          t.isMemberExpression(tag) &&\n          t.isIdentifier(tag.object) &&\n          t.isIdentifier(tag.property) &&\n          tag.object.name === 'styled' &&\n          imports(\n            t,\n            path.scope,\n            state.file.opts.filename,\n            'styled',\n            'linaria/react'\n          )\n        ) {\n          styled = {\n            component: { node: t.stringLiteral(tag.property.name) },\n          };\n        } else if (\n          imports(t, path.scope, state.file.opts.filename, 'css', 'linaria')\n        ) {\n          css = t.isIdentifier(tag) && tag.name === 'css';\n        }\n\n        if (!(styled || css)) {\n          return;\n        }\n\n        // Increment the index of the style we're processing\n        // This is used for slug generation to prevent collision\n        // Also used for display name if it couldn't be determined\n        state.index++;\n\n        const interpolations = [];\n\n        // Check if the variable is referenced anywhere for basic DCE\n        // Only works when it's assigned to a variable\n        let isReferenced = true;\n\n        // Try to determine a readable class name\n        let displayName;\n\n        const parent = path.findParent(\n          p =>\n            t.isObjectProperty(p) ||\n            t.isJSXOpeningElement(p) ||\n            t.isVariableDeclarator(p)\n        );\n\n        if (parent) {\n          if (t.isObjectProperty(parent)) {\n            displayName = parent.node.key.name || parent.node.key.value;\n          } else if (t.isJSXOpeningElement(parent)) {\n            displayName = parent.node.name.name;\n          } else if (t.isVariableDeclarator(parent)) {\n            const { referencePaths } = path.scope.getBinding(\n              parent.node.id.name\n            );\n\n            isReferenced = referencePaths.length !== 0;\n            displayName = parent.node.id.name;\n          }\n        }\n\n        if (!displayName) {\n          // Try to derive the path from the filename\n          displayName = basename(state.file.opts.filename);\n\n          if (/^index\\.[a-z0-9]+$/.test(displayName)) {\n            // If the file name is 'index', better to get name from parent folder\n            displayName = basename(dirname(state.file.opts.filename));\n          }\n\n          // Remove the file extension\n          displayName = displayName.replace(/\\.[a-z0-9]+$/, '');\n\n          if (displayName) {\n            displayName += state.index;\n          } else {\n            throw path.buildCodeFrameError(\n              \"Couldn't determine a name for the component. Ensure that it's either:\\n\" +\n                '- Assigned to a variable\\n' +\n                '- Is an object property\\n' +\n                '- Is a prop in a JSX element\\n'\n            );\n          }\n        }\n\n        // Custom properties need to start with a letter, so we prefix the slug\n        // Also use append the index of the class to the filename for uniqueness in the file\n        const slug = toValidCSSIdentifier(\n          `${displayName.charAt(0).toLowerCase()}${slugify(\n            `${relative(state.file.opts.root, state.file.opts.filename)}:${\n              state.index\n            }`\n          )}`\n        );\n\n        const className = options.displayName\n          ? `${toValidCSSIdentifier(displayName)}_${slug}`\n          : slug;\n\n        // Serialize the tagged template literal to a string\n        let cssText = '';\n\n        const expressions = path.get('quasi').get('expressions');\n\n        quasi.quasis.forEach((el, i, self) => {\n          let appended = false;\n\n          if (i !== 0) {\n            // Check if previous expression was a CSS variable that we replaced\n            // If it has a unit after it, we need to move the unit into the interpolation\n            // e.g. `var(--size)px` should actually be `var(--size)`\n            // So we check if the current text starts with a unit, and add the unit to the previous interpolation\n            // Another approach would be `calc(var(--size) * 1px), but some browsers don't support all units\n            // https://bugzilla.mozilla.org/show_bug.cgi?id=956573\n            const matches = el.value.cooked.match(unitRegex);\n\n            if (matches) {\n              const last = interpolations[interpolations.length - 1];\n              const [, unit] = matches;\n\n              if (last && cssText.endsWith(`var(--${last.id})`)) {\n                last.unit = unit;\n                cssText += el.value.cooked.replace(unitRegex, '$2');\n                appended = true;\n              }\n            }\n          }\n\n          if (!appended) {\n            cssText += el.value.cooked;\n          }\n\n          const ex = expressions[i];\n\n          if (ex) {\n            const { end } = ex.node.loc;\n            const result = ex.evaluate();\n            const beforeLength = cssText.length;\n\n            // The location will be end of the current string to start of next string\n            const next = self[i + 1];\n            const loc = {\n              // +1 because the expressions location always shows 1 column before\n              start: { line: el.loc.end.line, column: el.loc.end.column + 1 },\n              end: next\n                ? { line: next.loc.start.line, column: next.loc.start.column }\n                : { line: end.line, column: end.column + 1 },\n            };\n\n            if (result.confident) {\n              throwIfInvalid(result.value, ex);\n\n              if (isPlainObject(result.value)) {\n                // If it's a plain object, convert it to a CSS string\n                cssText += stripLines(loc, toCSS(result.value));\n              } else {\n                cssText += stripLines(loc, result.value);\n              }\n\n              state.replacements.push({\n                original: loc,\n                length: cssText.length - beforeLength,\n              });\n            } else {\n              // Try to preval the value\n              if (\n                options.evaluate &&\n                !(t.isFunctionExpression(ex) || t.isArrowFunctionExpression(ex))\n              ) {\n                let evaluation;\n\n                try {\n                  evaluation = evaluate(\n                    ex,\n                    t,\n                    state.file.opts.filename,\n                    undefined,\n                    options\n                  );\n                } catch (e) {\n                  throw ex.buildCodeFrameError(\n                    `An error occurred when evaluating the expression: ${\n                      e.message\n                    }. Make sure you are not using a browser or Node specific API.`\n                  );\n                }\n\n                const { value, dependencies } = evaluation;\n\n                throwIfInvalid(value, ex);\n\n                if (typeof value !== 'function') {\n                  // Only insert text for non functions\n                  // We don't touch functions because they'll be interpolated at runtime\n\n                  if (isValidElementType(value) && value.__linaria) {\n                    // If it's an React component wrapped in styled, get the class name\n                    // Useful for interpolating components\n                    cssText += `.${value.__linaria.className}`;\n                  } else if (isPlainObject(value)) {\n                    cssText += stripLines(loc, toCSS(value));\n                  } else {\n                    // For anything else, assume it'll be stringified\n                    cssText += stripLines(loc, value);\n                  }\n\n                  state.dependencies.push(...dependencies);\n                  state.replacements.push({\n                    original: loc,\n                    length: cssText.length - beforeLength,\n                  });\n\n                  return;\n                }\n              }\n\n              if (styled) {\n                const id = `${slug}-${i}`;\n\n                interpolations.push({\n                  id,\n                  node: ex.node,\n                  source: ex.getSource() || generator(ex.node).code,\n                  unit: '',\n                });\n\n                cssText += `var(--${id})`;\n              } else {\n                // CSS custom properties can't be used outside components\n                throw ex.buildCodeFrameError(\n                  `The CSS cannot contain JavaScript expressions when using the 'css' tag. To evaluate the expressions at build time, pass 'evaluate: true' to the babel plugin.`\n                );\n              }\n            }\n          }\n        });\n\n        let selector = `.${className}`;\n\n        if (styled) {\n          // If `styled` wraps another component and not a primitive,\n          // get its class name to create a more specific selector\n          // it'll ensure that styles are overridden properly\n          if (options.evaluate && t.isIdentifier(styled.component.node)) {\n            let { value } = evaluate(\n              styled.component,\n              t,\n              state.file.opts.filename,\n              undefined,\n              options\n            );\n\n            while (isValidElementType(value) && value.__linaria) {\n              selector += `.${value.__linaria.className}`;\n              value = value.__linaria.extends;\n            }\n          }\n\n          const props = [];\n\n          props.push(\n            t.objectProperty(t.identifier('name'), t.stringLiteral(displayName))\n          );\n\n          props.push(\n            t.objectProperty(t.identifier('class'), t.stringLiteral(className))\n          );\n\n          // If we found any interpolations, also pass them so they can be applied\n          if (interpolations.length) {\n            // De-duplicate interpolations based on the source and unit\n            // If two interpolations have the same source code and same unit,\n            // we don't need to use 2 custom properties for them, we can use a single one\n            const result = {};\n\n            interpolations.forEach(it => {\n              const key = it.source + it.unit;\n\n              if (key in result) {\n                cssText = cssText.replace(\n                  `var(--${it.id})`,\n                  `var(--${result[key].id})`\n                );\n              } else {\n                result[key] = it;\n              }\n            });\n\n            props.push(\n              t.objectProperty(\n                t.identifier('vars'),\n                t.objectExpression(\n                  Object.keys(result).map(key => {\n                    const { id, node, unit } = result[key];\n                    const items = [node];\n\n                    if (unit) {\n                      items.push(t.stringLiteral(unit));\n                    }\n\n                    return t.objectProperty(\n                      t.stringLiteral(id),\n                      t.arrayExpression(items)\n                    );\n                  })\n                )\n              )\n            );\n          }\n\n          path.replaceWith(\n            t.callExpression(\n              t.callExpression(t.identifier('styled'), [styled.component.node]),\n              [t.objectExpression(props)]\n            )\n          );\n\n          path.addComment('leading', '#__PURE__');\n        } else {\n          path.replaceWith(t.stringLiteral(className));\n        }\n\n        if (!isReferenced && !cssText.includes(':global')) {\n          return;\n        }\n\n        state.rules[selector] = {\n          cssText,\n          className,\n          displayName,\n          start: path.parent && path.parent.loc ? path.parent.loc.start : null,\n        };\n      },\n    },\n  };\n};\n"],"file":"extract.js"}