{"version":3,"sources":["../src/cli.js"],"names":["path","require","normalize","fs","mkdirp","glob","yargs","transform","usage","option","alias","type","description","demandOption","requiresArg","default","implies","strict","argv","processFiles","_","outDir","sourceMaps","sourceRoot","insertCssRequires","files","options","count","resolvedFiles","reduce","acc","pattern","sync","absolute","forEach","filename","outputFilename","resolveOutputFilename","readFileSync","toString","pluginOptions","cssText","sourceMap","cssSourceMapText","dirname","cssContent","writeFileSync","inputFilename","resolve","relative","relativePath","requireStatement","startsWith","inputContent","trim","endsWith","console","log","folderStructure","process","cwd","outputBasename","basename","replace","extname","join"],"mappings":"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","sourcesContent":["/* @flow */\n\nconst path = require('path');\nconst normalize = require('normalize-path');\nconst fs = require('fs');\nconst mkdirp = require('mkdirp');\nconst glob = require('glob');\nconst yargs = require('yargs');\nconst transform = require('./transform');\n\nconst { argv } = yargs\n  .usage('Usage: $0 [options] <files ...>')\n  .option('out-dir', {\n    alias: 'o',\n    type: 'string',\n    description: 'Output directory for the extracted CSS files',\n    demandOption: true,\n    requiresArg: true,\n  })\n  .option('source-maps', {\n    alias: 's',\n    type: 'boolean',\n    description: 'Generate source maps for the CSS files',\n    default: false,\n  })\n  .option('source-root', {\n    alias: 'r',\n    type: 'string',\n    description: 'Directory containing the source JS files',\n    requiresArg: true,\n  })\n  .option('insert-css-requires', {\n    alias: 'i',\n    type: 'string',\n    description:\n      'Directory containing JS files to insert require statements for the CSS files',\n    requiresArg: true,\n  })\n  .implies('insert-css-requires', 'source-root')\n  .alias('help', 'h')\n  .alias('version', 'v')\n  .strict();\n\nprocessFiles(argv._, {\n  outDir: argv['out-dir'],\n  sourceMaps: argv['source-maps'],\n  sourceRoot: argv['source-root'],\n  insertCssRequires: argv['insert-css-requires'],\n});\n\ntype Options = {\n  outDir: string,\n  sourceMaps?: boolean,\n  sourceRoot?: string,\n  insertCssRequires?: string,\n};\n\nfunction processFiles(files: string[], options: Options) {\n  let count = 0;\n\n  const resolvedFiles = files.reduce(\n    (acc, pattern) => [...acc, ...glob.sync(pattern, { absolute: true })],\n    []\n  );\n\n  resolvedFiles.forEach(filename => {\n    const outputFilename = resolveOutputFilename(filename, options.outDir);\n\n    const { cssText, sourceMap, cssSourceMapText } = transform(\n      fs.readFileSync(filename).toString(),\n      {\n        filename,\n        outputFilename,\n        pluginOptions: {},\n      }\n    );\n\n    if (cssText) {\n      mkdirp.sync(path.dirname(outputFilename));\n\n      const cssContent =\n        options.sourceMaps && sourceMap\n          ? `${cssText}\\n/*# sourceMappingURL=${outputFilename}.map */`\n          : cssText;\n\n      fs.writeFileSync(outputFilename, cssContent);\n\n      if (\n        options.sourceMaps &&\n        sourceMap &&\n        typeof cssSourceMapText !== 'undefined'\n      ) {\n        fs.writeFileSync(`${outputFilename}.map`, cssSourceMapText);\n      }\n\n      if (options.insertCssRequires && options.sourceRoot) {\n        const inputFilename = path.resolve(\n          options.insertCssRequires,\n          path.relative(options.sourceRoot, filename)\n        );\n\n        const relativePath = normalize(\n          path.relative(path.dirname(inputFilename), outputFilename)\n        );\n\n        const requireStatement = `\\nrequire('${\n          relativePath.startsWith('.') ? relativePath : `./${relativePath}`\n        }');`;\n\n        const inputContent = fs.readFileSync(inputFilename, 'utf-8');\n\n        if (!inputContent.trim().endsWith(requireStatement)) {\n          fs.writeFileSync(\n            inputFilename,\n            `${inputContent}\\n${requireStatement}\\n`\n          );\n        }\n      }\n\n      count++;\n    }\n  });\n\n  console.log(`Successfully extracted ${count} CSS files.`);\n}\n\nfunction resolveOutputFilename(filename: string, outDir: string) {\n  const folderStructure = path.relative(process.cwd(), path.dirname(filename));\n  const outputBasename = path\n    .basename(filename)\n    .replace(path.extname(filename), '.css');\n\n  return path.join(outDir, folderStructure, outputBasename);\n}\n"],"file":"cli.js"}