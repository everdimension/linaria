{"version":3,"sources":["../../src/stylelint/preprocessor.js"],"names":["transform","require","preprocessor","cache","code","input","filename","result","e","rules","replacements","cssText","Object","keys","forEach","selector","rule","line","split","length","start","displayName","last","pop","column","original","warnings","w","end","module","exports"],"mappings":"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","sourcesContent":["/* @flow */\n\nconst transform = require('../transform');\n\ntype LintResult = {\n  warnings: { line: number, column: number }[],\n};\n\nfunction preprocessor() {\n  const cache = {};\n\n  return {\n    code(input: string, filename: string) {\n      let result;\n\n      try {\n        result = transform(input, {\n          filename,\n        });\n      } catch (e) {\n        // Ignore parse errors\n        return '';\n      }\n\n      const { rules, replacements } = result;\n\n      if (!rules) {\n        return '';\n      }\n\n      // Construct a CSS-ish file from the unprocessed style rules\n      let cssText = '';\n\n      Object.keys(rules).forEach(selector => {\n        const rule = rules[selector];\n\n        // Append new lines until we get to the start line number\n        let line = cssText.split('\\n').length;\n\n        while (rule.start && line < rule.start.line) {\n          cssText += '\\n';\n          line++;\n        }\n\n        cssText += `.${rule.displayName} {`;\n\n        // Append blank spaces until we get to the start column number\n        const last = cssText.split('\\n').pop();\n\n        let column = last ? last.length : 0;\n\n        while (rule.start && column < rule.start.column) {\n          cssText += ' ';\n          column++;\n        }\n\n        cssText += `${rule.cssText} }`;\n      });\n\n      cache[filename] = replacements;\n\n      return cssText;\n    },\n    result(result: LintResult, filename: string) {\n      const replacements = cache[filename];\n\n      if (replacements) {\n        replacements.forEach(({ original, length }) => {\n          // If the warnings contain stuff that's been replaced,\n          // Correct the line and column numbers to what's replaced\n          result.warnings.forEach(w => {\n            /* eslint-disable no-param-reassign */\n\n            if (w.line === original.start.line) {\n              // If the error is on the same line where an interpolation started, we need to adjust the line and column numbers\n              // Because a replacement would have increased or decreased the column numbers\n              // If it's in the same line where interpolation ended, it would have been adjusted during replacement\n              if (w.column > original.start.column + length) {\n                // The error is from an item after the replacements\n                // So we need to adjust the column\n                w.column +=\n                  original.end.column - original.start.column + 1 - length;\n              } else if (\n                w.column >= original.start.column &&\n                w.column < original.start.column + length\n              ) {\n                // The linter will underline the whole word in the editor if column is in inside a word\n                // Set the column to the end, so it will underline the word inside the interpolation\n                // e.g. in `${colors.primary}`, `primary` will be underlined\n                w.column =\n                  original.start.line === original.end.line\n                    ? original.end.column - 1\n                    : original.start.column;\n              }\n            }\n          });\n        });\n      }\n\n      return result;\n    },\n  };\n}\n\nmodule.exports = preprocessor;\n"],"file":"preprocessor.js"}