{"version":3,"sources":["../../src/react/styled.js"],"names":["React","require","validAttr","default","cx","warnIfInvalid","value","componentName","process","env","NODE_ENV","Number","isFinite","stringified","JSON","stringify","String","console","warn","styled","tag","options","Array","isArray","Error","render","props","ref","as","component","className","class","rest","filteredProps","includes","key","vars","style","Object","keys","forEach","name","result","unit","assign","__linaria","createElement","Result","forwardRef","innerRef","displayName","extends","module","exports","Proxy","get","o","prop"],"mappings":"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","sourcesContent":["/* @flow */\n\nconst React = require('react'); // eslint-disable-line import/no-extraneous-dependencies\nconst { default: validAttr } = require('@emotion/is-prop-valid');\nconst { cx } = require('../index');\n\ntype Options = {\n  name: string,\n  class: string,\n  vars?: {\n    [string]: [\n      string | number | ((props: *) => string | number),\n      string | void,\n    ],\n  },\n};\n\nconst warnIfInvalid = (value: any, componentName) => {\n  if (process.env.NODE_ENV !== 'production') {\n    if (\n      typeof value === 'string' ||\n      (typeof value === 'number' && Number.isFinite(value))\n    ) {\n      return;\n    }\n\n    const stringified =\n      typeof value === 'object' ? JSON.stringify(value) : String(value);\n\n    // eslint-disable-next-line no-console\n    console.warn(\n      `An inteprolation evaluated to '${stringified}' in the component '${componentName}', which is probably a mistake. You should explicitly cast or transform the value to a string.`\n    );\n  }\n};\n\nfunction styled(tag: React.ComponentType<*> | string) {\n  return (options: Options) => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (Array.isArray(options)) {\n        // We received a strings array since it's used as a tag\n        throw new Error(\n          'Using the \"styled\" tag in runtime is not supported. Make sure you have set up the Babel plugin correctly. See https://github.com/callstack/linaria#setup'\n        );\n      }\n    }\n\n    const render = (props, ref) => {\n      const { as: component = tag, class: className, ...rest } = props;\n\n      let filteredProps;\n\n      // Check if it's an HTML tag and not a custom element\n      if (typeof tag === 'string' && !tag.includes('-')) {\n        filteredProps = {};\n\n        // eslint-disable-next-line guard-for-in\n        for (const key in rest) {\n          if (key === 'as' || validAttr(key)) {\n            // Don't pass through invalid attributes to HTML elements\n            filteredProps[key] = rest[key];\n          }\n        }\n      } else {\n        filteredProps = rest;\n      }\n\n      filteredProps.ref = ref;\n      filteredProps.className = cx(\n        filteredProps.className || className,\n        options.class\n      );\n\n      const { vars } = options;\n\n      if (vars) {\n        const style = {};\n\n        Object.keys(vars).forEach(name => {\n          const [result, unit = ''] = vars[name];\n          const value = typeof result === 'function' ? result(props) : result;\n\n          warnIfInvalid(value, options.name);\n\n          style[`--${name}`] = `${value}${unit}`;\n        });\n\n        filteredProps.style = Object.assign(style, filteredProps.style);\n      }\n\n      /* $FlowFixMe */\n      if (tag.__linaria && tag !== component) {\n        // If the underlying tag is a styled component, forward the `as` prop\n        // Otherwise the styles from the underlying component will be ignored\n        filteredProps.as = component;\n\n        return React.createElement(tag, filteredProps);\n      }\n\n      return React.createElement(component, filteredProps);\n    };\n\n    const Result = React.forwardRef\n      ? React.forwardRef(render)\n      : // React.forwardRef won't available on older React versions and in Preact\n        // Fallback to a innerRef prop in that case\n        ({ innerRef, ...rest }) => render(rest, innerRef);\n\n    Result.displayName = options.name;\n\n    // These properties will be read by the babel plugin for interpolation\n    /* $FlowFixMe */\n    Result.__linaria = {\n      className: options.class,\n      extends: tag,\n    };\n\n    return Result;\n  };\n}\n\nif (process.env.NODE_ENV !== 'production') {\n  module.exports = new Proxy(styled, {\n    get(o, prop) {\n      return o(prop);\n    },\n  });\n} else {\n  module.exports = styled;\n}\n\ntype CSSProperties = {\n  [key: string]: string | number | CSSProperties,\n};\n\ntype StyledComponent<T> = React.ComponentType<T & { as?: React$ElementType }>;\n\ntype StyledTag<T> = (\n  strings: string[],\n  ...exprs: Array<string | number | CSSProperties | (T => string | number)>\n) => StyledComponent<T>;\n\ntype StyledJSXIntrinsics = $ObjMap<\n  $JSXIntrinsics,\n  () => StyledTag<{ children?: React$Node, [key: string]: any }>\n>;\n\ndeclare module.exports: StyledJSXIntrinsics & {|\n  <T>(T): StyledTag<React.ElementConfig<T>>,\n|};\n"],"file":"styled.js"}